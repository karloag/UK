# -*- coding: utf-8 -*-
"""Evaluacion Semana 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qZXpE7skpJ3GeLK-wrfFfplN3UA4yTIU

Actividad 1: Implementa la función actualizar_inventario(producto,
cantidad, accion) que reciba el nombre del producto, la cantidad y la
acción (entrada o salida). La función debe actualizar el nivel de inventario
del producto correspondiente. Asegúrate de que el inventario no se vuelva
negativo.
"""

#Inventario en un diccionario
inventario = {
"producto1": {"cantidad": 20},
"producto2": {"cantidad": 20},
"producto3": {"cantidad": 30}
}
#funcion con parametros
def actualizar_inventario(producto, cantidad, accion):
  #condicionales para filtrar entradas invalidas
  if producto not in inventario:
    print(f"El producto {producto} no se encuentra en el inventario.")
    return

  if cantidad < 0:
      print("La cantidad no puede ser negativa.")
      return

#condicionales para modificar la Clave-Valor "cantidad" segun sea el caso
  if accion == "entrada":
        inventario[producto]["cantidad"] += cantidad
  elif accion == "salida":
       if cantidad > inventario[producto]["cantidad"]:
          print(f"No hay suficiente inventario de {producto} para realizar la salida.")
          return
       inventario[producto]["cantidad"] -= cantidad
  else:
          print("Error elija entrada o salida")
          return

"""---

Actividad 2: Crea una lista de  transacciones de inventario y utiliza un bucle
for para iterar sobre la lista, llamando a la función actualizar_inventario
para cada transacción.
"""

#lista
transacciones = [
    ("producto1", 5, "entrada"),
    ("producto2", 3, "salida"),
    ("producto3", 2, "entrada"),
    ("producto1", 1, "salida")
]

#bucle for para iterar en la lista de tuplas
for producto, cantidad, accion in transacciones:
    actualizar_inventario(producto, cantidad, accion)


#impresion
print("\nInventario:")
for producto, datos in inventario.items():
    print(f"{producto}: {datos['cantidad']} unidades")

"""---

Actividad 3:
Desarrolla la función verificar_niveles_inventario(inventario,
nivel_critico) que reciba el inventario actual (un diccionario con los
products y sus niveles de inventario) y un nivel crítico. La función debe
imprimir alertas para los productos cuyo nivel esté por debajo del nivel
crítico.
"""

#funcion con parametros products y nivel critico

def verificar_niveles_inventario(inventario, nivel_critico):
    #bucle para recorrer itens de iventario y comparacion
    for producto, datos in inventario.items():
        if datos["cantidad"] < nivel_critico:
            print(f"El inventario de {producto} está por debajo del nivel crítico.")
#declaracion de nivel critico
nivel_critico = 50
#llamada a funcion
verificar_niveles_inventario(inventario, nivel_critico)